#[cfg(target_os = "hermit")]
extern crate hermit_sys;

use std::fs::File;
use std::io::prelude::*;
use std::path::Path;

mod application_bindings;

fn main() {
    let path = Path::new("malicious_file");
    let path_display = path.display();
    
    println!("try to open {} now...", path_display);

    let mut file = match File::open(&path) {
        Err(err) => panic!("Could not open {} because of \"{}\"", path_display, err),
        Ok(file) => file,
    };

    let mut content = String::new();
    match file.read_to_string(&mut content) {
        Err(err) => println!("Could not read {} because of \"{}\"", path_display, err),
        Ok(_) => println!("File content: \n {}", content),
    };
    
    println!("Jumping to C function now");

    unsafe{
        let addr: i32 = application_bindings::myfunc(content.as_str());
        println!("Addr is: 0x{:x}", addr);
    }
    
    println!("Done");

    // loop{}
    /* let mut some_var = "foo";
    let some_addr = &mut some_var as *mut str;
    println!{"some_var: {} at addr: 0x{:x}", some_var, some_addr as usize};
    unsafe{
        *some_addr = some_var;
    }
    println!{"some_var: {} at addr: 0x{:x}", some_var, some_addr as usize};
    */
}
